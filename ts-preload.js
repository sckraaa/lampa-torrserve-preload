(function() {
    'use strict';

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ
    var plugin_info = {
        name: 'TorrServe Smart Preload',
        version: '1.0.0',
        author: 'TorrServe Team',
        description: '–£–º–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ 4K –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
    };

    console.log('[TorrServe Smart Preload] –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ v' + plugin_info.version);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞
    var Settings = {
        torrserve_host: Lampa.Storage.get('torrserver_host', 'http://192.168.1.100:8090'),
        auto_calculate: Lampa.Storage.get('smart_preload_auto', true),
        default_percent: Lampa.Storage.get('smart_preload_percent', 50),
        preload_timeout: Lampa.Storage.get('smart_preload_timeout', 30), // –º–∏–Ω—É—Ç
        show_notifications: Lampa.Storage.get('smart_preload_notifications', true)
    };

    // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TorrServe
    var TorrServeAPI = {
        
        // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ
        getRecommendation: function(magnet, fileIndex, callback) {
            console.log('[TorrServe API] –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è:', magnet.substring(0, 50) + '...');
            
            var data = {
                magnet: magnet,
                file_index: fileIndex || 0,
                auto_calculate: true
            };

            Lampa.Utils.request({
                url: Settings.torrserve_host + '/preload/recommend',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify(data),
                timeout: 15000,
                success: function(response) {
                    console.log('[TorrServe API] –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', response);
                    try {
                        var recommendation = typeof response === 'string' ? JSON.parse(response) : response;
                        callback(null, recommendation);
                    } catch (e) {
                        callback('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ' + e.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('[TorrServe API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', error);
                    callback('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å TorrServe: ' + error);
                }
            });
        },

        // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
        startPreload: function(magnet, fileIndex, options, callback) {
            console.log('[TorrServe API] –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è:', magnet.substring(0, 50) + '...');
            
            var data = {
                magnet: magnet,
                file_index: fileIndex || 0,
                auto_calculate: options.auto_calculate || Settings.auto_calculate,
                percent: options.percent || Settings.default_percent,
                priority: 5
            };

            Lampa.Utils.request({
                url: Settings.torrserve_host + '/preload',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify(data),
                timeout: 10000,
                success: function(response) {
                    console.log('[TorrServe API] –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞:', response);
                    try {
                        var result = typeof response === 'string' ? JSON.parse(response) : response;
                        callback(null, result);
                    } catch (e) {
                        callback('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ' + e.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('[TorrServe API] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error);
                    callback('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å TorrServe: ' + error);
                }
            });
        },

        // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        getPreloadStatus: function(taskId, callback) {
            Lampa.Utils.request({
                url: Settings.torrserve_host + '/preload/status?task_id=' + taskId,
                method: 'GET',
                timeout: 5000,
                success: function(response) {
                    try {
                        var status = typeof response === 'string' ? JSON.parse(response) : response;
                        callback(null, status);
                    } catch (e) {
                        callback('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞: ' + e.message);
                    }
                },
                error: function(xhr, status, error) {
                    callback('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + error);
                }
            });
        },

        // –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
        cancelPreload: function(taskId, callback) {
            Lampa.Utils.request({
                url: Settings.torrserve_host + '/preload/cancel?task_id=' + taskId,
                method: 'POST',
                timeout: 5000,
                success: function(response) {
                    callback(null, response);
                },
                error: function(xhr, status, error) {
                    callback('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ' + error);
                }
            });
        }
    };

    // UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    var PreloadUI = {
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –ü—Ä–æ—Å–º–æ—Ç—Ä
        showChoiceDialog: function(torrent, callback) {
            console.log('[PreloadUI] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–ª—è:', torrent.title);

            var dialog = $('<div class="preload-choice-dialog"></div>');
            
            var html = `
                <div class="preload-choice-container">
                    <div class="preload-choice-header">
                        <h2>üé¨ ${torrent.title}</h2>
                        <p>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</p>
                    </div>
                    
                    <div class="preload-choice-buttons">
                        <div class="preload-choice-btn preload-btn" data-action="preload">
                            <div class="choice-icon">‚è≥</div>
                            <div class="choice-title">–£–º–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞</div>
                            <div class="choice-desc">–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Å—Ç—å —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ 4K</div>
                        </div>
                        
                        <div class="preload-choice-btn watch-btn" data-action="watch">
                            <div class="choice-icon">‚ñ∂Ô∏è</div>
                            <div class="choice-title">–°–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å</div>
                            <div class="choice-desc">–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ</div>
                        </div>
                    </div>
                    
                    <div class="preload-choice-info">
                        <p>üí° –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è 4K –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ</p>
                    </div>
                </div>
            `;
            
            dialog.html(html);
            
            // –°—Ç–∏–ª–∏
            var styles = `
                <style>
                .preload-choice-dialog {
                    position: fixed;
                    top: 0; left: 0; right: 0; bottom: 0;
                    background: rgba(0,0,0,0.8);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 10000;
                }
                .preload-choice-container {
                    background: #1a1a1a;
                    border-radius: 12px;
                    padding: 30px;
                    max-width: 600px;
                    width: 90%;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.5);
                }
                .preload-choice-header h2 {
                    color: #fff;
                    margin: 0 0 10px 0;
                    font-size: 24px;
                    text-align: center;
                }
                .preload-choice-header p {
                    color: #ccc;
                    margin: 0 0 30px 0;
                    text-align: center;
                    font-size: 16px;
                }
                .preload-choice-buttons {
                    display: flex;
                    gap: 20px;
                    margin-bottom: 20px;
                }
                .preload-choice-btn {
                    flex: 1;
                    background: #2a2a2a;
                    border-radius: 8px;
                    padding: 20px;
                    text-align: center;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    border: 2px solid transparent;
                }
                .preload-choice-btn:hover {
                    background: #3a3a3a;
                    border-color: #0078d4;
                    transform: translateY(-2px);
                }
                .preload-choice-btn.preload-btn:hover {
                    border-color: #ff6b35;
                }
                .preload-choice-btn.watch-btn:hover {
                    border-color: #4CAF50;
                }
                .choice-icon {
                    font-size: 32px;
                    margin-bottom: 10px;
                }
                .choice-title {
                    color: #fff;
                    font-size: 18px;
                    font-weight: bold;
                    margin-bottom: 8px;
                }
                .choice-desc {
                    color: #ccc;
                    font-size: 14px;
                    line-height: 1.4;
                }
                .preload-choice-info {
                    text-align: center;
                    color: #999;
                    font-size: 14px;
                    border-top: 1px solid #333;
                    padding-top: 15px;
                }
                </style>
            `;
            
            $('head').append(styles);
            $('body').append(dialog);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            dialog.find('.preload-choice-btn').on('click', function(e) {
                e.preventDefault();
                var action = $(this).data('action');
                dialog.remove();
                callback(action);
            });
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC –∏–ª–∏ –∫–ª–∏–∫—É –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
            $(document).on('keydown.preload-choice', function(e) {
                if (e.keyCode === 27) { // ESC
                    dialog.remove();
                    $(document).off('keydown.preload-choice');
                }
            });
            
            dialog.on('click', function(e) {
                if (e.target === dialog[0]) {
                    dialog.remove();
                }
            });
        },

        // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        showPreloadSetup: function(torrent, recommendation, callback) {
            console.log('[PreloadUI] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏');

            var dialog = $('<div class="preload-setup-dialog"></div>');
            
            var sizeGB = recommendation ? (recommendation.recommended_bytes / (1024*1024*1024)).toFixed(1) : '?';
            var speedMBps = recommendation ? (recommendation.estimated_speed_bps / (1024*1024)).toFixed(1) : '?';
            
            var html = `
                <div class="preload-setup-container">
                    <div class="preload-setup-header">
                        <h2>üß† –£–º–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞</h2>
                        <h3>${torrent.title}</h3>
                    </div>
                    
                    ${recommendation ? `
                    <div class="preload-recommendation">
                        <div class="rec-title">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è AI:</div>
                        <div class="rec-content">
                            <div class="rec-item">
                                <span class="rec-label">–ü—Ä–æ—Ü–µ–Ω—Ç:</span>
                                <span class="rec-value">${recommendation.recommended_percent}% (${sizeGB} –ì–ë)</span>
                            </div>
                            <div class="rec-item">
                                <span class="rec-label">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                                <span class="rec-value">${speedMBps} –ú–ë/—Å</span>
                            </div>
                            <div class="rec-item">
                                <span class="rec-label">–í—Ä–µ–º—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:</span>
                                <span class="rec-value">${recommendation.preload_time_minutes} –º–∏–Ω</span>
                            </div>
                            <div class="rec-item">
                                <span class="rec-label">–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</span>
                                <span class="rec-value">${recommendation.play_time_minutes} –º–∏–Ω</span>
                            </div>
                        </div>
                        <div class="rec-reasoning">${recommendation.reasoning}</div>
                    </div>
                    ` : `
                    <div class="preload-loading">
                        <div class="loading-spinner">‚è≥</div>
                        <div>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...</div>
                    </div>
                    `}
                    
                    <div class="preload-options">
                        <label class="preload-option">
                            <input type="radio" name="preload-mode" value="auto" ${Settings.auto_calculate ? 'checked' : ''}>
                            <span>ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</span>
                        </label>
                        <label class="preload-option">
                            <input type="radio" name="preload-mode" value="manual" ${!Settings.auto_calculate ? 'checked' : ''}>
                            <span>‚öôÔ∏è –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</span>
                        </label>
                    </div>
                    
                    <div class="preload-manual-settings" style="${Settings.auto_calculate ? 'display:none' : ''}">
                        <label class="manual-input">
                            <span>–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:</span>
                            <input type="range" min="10" max="90" value="${Settings.default_percent}" class="percent-slider">
                            <span class="percent-value">${Settings.default_percent}%</span>
                        </label>
                    </div>
                    
                    <div class="preload-buttons">
                        <button class="preload-start-btn">üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É</button>
                        <button class="preload-cancel-btn">‚ùå –û—Ç–º–µ–Ω–∞</button>
                    </div>
                </div>
            `;
            
            dialog.html(html);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
            var setupStyles = `
                <style>
                .preload-setup-dialog {
                    position: fixed;
                    top: 0; left: 0; right: 0; bottom: 0;
                    background: rgba(0,0,0,0.9);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 10001;
                }
                .preload-setup-container {
                    background: #1a1a1a;
                    border-radius: 12px;
                    padding: 30px;
                    max-width: 700px;
                    width: 90%;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.7);
                    max-height: 80vh;
                    overflow-y: auto;
                }
                .preload-setup-header h2 {
                    color: #fff;
                    margin: 0 0 5px 0;
                    font-size: 24px;
                    text-align: center;
                }
                .preload-setup-header h3 {
                    color: #ccc;
                    margin: 0 0 25px 0;
                    font-size: 16px;
                    text-align: center;
                    font-weight: normal;
                }
                .preload-recommendation {
                    background: #2a2a2a;
                    border-radius: 8px;
                    padding: 20px;
                    margin-bottom: 20px;
                    border-left: 4px solid #ff6b35;
                }
                .rec-title {
                    color: #ff6b35;
                    font-weight: bold;
                    margin-bottom: 15px;
                    font-size: 16px;
                }
                .rec-content {
                    display: grid;
                    gap: 8px;
                    margin-bottom: 15px;
                }
                .rec-item {
                    display: flex;
                    justify-content: space-between;
                }
                .rec-label {
                    color: #ccc;
                }
                .rec-value {
                    color: #fff;
                    font-weight: bold;
                }
                .rec-reasoning {
                    color: #aaa;
                    font-style: italic;
                    font-size: 14px;
                }
                .preload-loading {
                    text-align: center;
                    padding: 40px;
                    color: #ccc;
                }
                .loading-spinner {
                    font-size: 32px;
                    margin-bottom: 10px;
                    animation: spin 1s linear infinite;
                }
                @keyframes spin {
                    from { transform: rotate(0deg); }
                    to { transform: rotate(360deg); }
                }
                .preload-options {
                    margin-bottom: 20px;
                }
                .preload-option {
                    display: block;
                    color: #fff;
                    margin-bottom: 10px;
                    cursor: pointer;
                    padding: 10px;
                    border-radius: 6px;
                    transition: background 0.2s;
                }
                .preload-option:hover {
                    background: #2a2a2a;
                }
                .preload-option input {
                    margin-right: 10px;
                }
                .preload-manual-settings {
                    background: #2a2a2a;
                    border-radius: 8px;
                    padding: 15px;
                    margin-bottom: 20px;
                }
                .manual-input {
                    display: flex;
                    align-items: center;
                    gap: 15px;
                    color: #fff;
                }
                .percent-slider {
                    flex: 1;
                    height: 6px;
                    background: #444;
                    border-radius: 3px;
                    outline: none;
                }
                .percent-value {
                    min-width: 40px;
                    font-weight: bold;
                    color: #ff6b35;
                }
                .preload-buttons {
                    display: flex;
                    gap: 15px;
                    justify-content: center;
                }
                .preload-start-btn, .preload-cancel-btn {
                    padding: 12px 30px;
                    border-radius: 6px;
                    border: none;
                    font-size: 16px;
                    cursor: pointer;
                    transition: all 0.3s;
                }
                .preload-start-btn {
                    background: #4CAF50;
                    color: white;
                }
                .preload-start-btn:hover {
                    background: #45a049;
                    transform: translateY(-1px);
                }
                .preload-cancel-btn {
                    background: #666;
                    color: white;
                }
                .preload-cancel-btn:hover {
                    background: #777;
                }
                </style>
            `;
            
            $('head').append(setupStyles);
            $('body').append(dialog);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            dialog.find('input[name="preload-mode"]').on('change', function() {
                var isManual = $(this).val() === 'manual';
                dialog.find('.preload-manual-settings').toggle(isManual);
                Settings.auto_calculate = !isManual;
                Lampa.Storage.set('smart_preload_auto', Settings.auto_calculate);
            });
            
            dialog.find('.percent-slider').on('input', function() {
                var value = $(this).val();
                dialog.find('.percent-value').text(value + '%');
                Settings.default_percent = parseInt(value);
                Lampa.Storage.set('smart_preload_percent', Settings.default_percent);
            });
            
            dialog.find('.preload-start-btn').on('click', function() {
                var options = {
                    auto_calculate: Settings.auto_calculate,
                    percent: Settings.default_percent
                };
                dialog.remove();
                callback('start', options);
            });
            
            dialog.find('.preload-cancel-btn').on('click', function() {
                dialog.remove();
                callback('cancel');
            });
            
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –µ—ë –ø–æ–ª—É—á–∏—Ç—å
            if (!recommendation) {
                TorrServeAPI.getRecommendation(torrent.magnet, 0, function(error, rec) {
                    if (!error && rec) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
                        PreloadUI.updateRecommendationInDialog(dialog, rec);
                    } else {
                        console.warn('[PreloadUI] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:', error);
                        dialog.find('.preload-loading').html(`
                            <div style="color: #ff6b35;">‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é</div>
                            <div style="font-size: 14px; margin-top: 10px;">–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º</div>
                        `);
                    }
                });
            }
        },

        // –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –¥–∏–∞–ª–æ–≥–µ
        updateRecommendationInDialog: function(dialog, recommendation) {
            var sizeGB = (recommendation.recommended_bytes / (1024*1024*1024)).toFixed(1);
            var speedMBps = (recommendation.estimated_speed_bps / (1024*1024)).toFixed(1);
            
            var recHTML = `
                <div class="preload-recommendation">
                    <div class="rec-title">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è AI:</div>
                    <div class="rec-content">
                        <div class="rec-item">
                            <span class="rec-label">–ü—Ä–æ—Ü–µ–Ω—Ç:</span>
                            <span class="rec-value">${recommendation.recommended_percent}% (${sizeGB} –ì–ë)</span>
                        </div>
                        <div class="rec-item">
                            <span class="rec-label">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                            <span class="rec-value">${speedMBps} –ú–ë/—Å</span>
                        </div>
                        <div class="rec-item">
                            <span class="rec-label">–í—Ä–µ–º—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:</span>
                            <span class="rec-value">${recommendation.preload_time_minutes} –º–∏–Ω</span>
                        </div>
                        <div class="rec-item">
                            <span class="rec-label">–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</span>
                            <span class="rec-value">${recommendation.play_time_minutes} –º–∏–Ω</span>
                        </div>
                    </div>
                    <div class="rec-reasoning">${recommendation.reasoning}</div>
                </div>
            `;
            
            dialog.find('.preload-loading').replaceWith(recHTML);
        },

        // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        showPreloadProgress: function(torrent, taskId) {
            console.log('[PreloadUI] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏:', taskId);

            var dialog = $('<div class="preload-progress-dialog"></div>');
            
            var html = `
                <div class="preload-progress-container">
                    <div class="preload-progress-header">
                        <h2>‚è≥ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞</h2>
                        <h3>${torrent.title}</h3>
                    </div>
                    
                    <div class="preload-progress-content">
                        <div class="progress-main">
                            <div class="progress-circle">
                                <svg class="progress-ring" width="120" height="120">
                                    <circle class="progress-ring-circle" stroke="#ff6b35" stroke-width="6" 
                                            fill="transparent" r="52" cx="60" cy="60"/>
                                </svg>
                                <div class="progress-text">
                                    <span class="progress-percent">0%</span>
                                    <span class="progress-label">–≥–æ—Ç–æ–≤–æ</span>
                                </div>
                            </div>
                            
                            <div class="progress-info">
                                <div class="info-item">
                                    <span class="info-label">–°—Ç–∞—Ç—É—Å:</span>
                                    <span class="info-value status-text">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                                    <span class="info-value speed-text">-</span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                                    <span class="info-value progress-text">0 / 0</span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">ETA:</span>
                                    <span class="info-value eta-text">-</span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">–ü–∏—Ä—ã:</span>
                                    <span class="info-value peers-text">-</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="preload-actions">
                            <button class="preload-watch-btn" disabled>‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å</button>
                            <button class="preload-stop-btn">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                        </div>
                        
                        <div class="preload-hint">
                            üí° –ö–æ–≥–¥–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, 
                            –∫–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å" —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π
                        </div>
                    </div>
                </div>
            `;
            
            dialog.html(html);
            
            // –°—Ç–∏–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            var progressStyles = `
                <style>
                .preload-progress-dialog {
                    position: fixed;
                    top: 0; left: 0; right: 0; bottom: 0;
                    background: rgba(0,0,0,0.9);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 10002;
                }
                .preload-progress-container {
                    background: #1a1a1a;
                    border-radius: 12px;
                    padding: 30px;
                    max-width: 600px;
                    width: 90%;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.7);
                }
                .preload-progress-header h2 {
                    color: #fff;
                    margin: 0 0 5px 0;
                    font-size: 24px;
                    text-align: center;
                }
                .preload-progress-header h3 {
                    color: #ccc;
                    margin: 0 0 30px 0;
                    font-size: 16px;
                    text-align: center;
                    font-weight: normal;
                }
                .progress-main {
                    display: flex;
                    gap: 30px;
                    align-items: center;
                    margin-bottom: 30px;
                }
                .progress-circle {
                    position: relative;
                    flex-shrink: 0;
                }
                .progress-ring {
                    transform: rotate(-90deg);
                }
                .progress-ring-circle {
                    stroke-dasharray: 326.56;
                    stroke-dashoffset: 326.56;
                    transition: stroke-dashoffset 0.5s ease;
                }
                .progress-text {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    text-align: center;
                }
                .progress-percent {
                    display: block;
                    font-size: 24px;
                    font-weight: bold;
                    color: #ff6b35;
                }
                .progress-label {
                    display: block;
                    font-size: 12px;
                    color: #ccc;
                }
                .progress-info {
                    flex: 1;
                }
                .info-item {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 10px;
                    padding: 8px 0;
                    border-bottom: 1px solid #333;
                }
                .info-label {
                    color: #ccc;
                }
                .info-value {
                    color: #fff;
                    font-weight: bold;
                }
                .preload-actions {
                    display: flex;
                    gap: 15px;
                    justify-content: center;
                    margin-bottom: 20px;
                }
                .preload-watch-btn, .preload-stop-btn {
                    padding: 12px 24px;
                    border-radius: 6px;
                    border: none;
                    font-size: 16px;
                    cursor: pointer;
                    transition: all 0.3s;
                }
                .preload-watch-btn {
                    background: #4CAF50;
                    color: white;
                }
                .preload-watch-btn:disabled {
                    background: #666;
                    cursor: not-allowed;
                    opacity: 0.6;
                }
                .preload-watch-btn:not(:disabled):hover {
                    background: #45a049;
                    transform: translateY(-1px);
                }
                .preload-stop-btn {
                    background: #f44336;
                    color: white;
                }
                .preload-stop-btn:hover {
                    background: #da190b;
                }
                .preload-hint {
                    background: #2a2a2a;
                    border-radius: 6px;
                    padding: 15px;
                    color: #ccc;
                    font-size: 14px;
                    text-align: center;
                    line-height: 1.4;
                }
                .status-ready {
                    color: #4CAF50 !important;
                }
                .status-error {
                    color: #f44336 !important;
                }
                </style>
            `;
            
            $('head').append(progressStyles);
            $('body').append(dialog);
            
            // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            var progressInterval = setInterval(function() {
                TorrServeAPI.getPreloadStatus(taskId, function(error, status) {
                    if (error) {
                        console.error('[PreloadUI] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
                        return;
                    }
                    
                    PreloadUI.updateProgressDialog(dialog, status);
                    
                    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    if (status.state === 'completed' || status.state === 'error' || status.state === 'cancelled') {
                        clearInterval(progressInterval);
                    }
                });
            }, 2000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            dialog.find('.preload-watch-btn').on('click', function() {
                if (!$(this).prop('disabled')) {
                    clearInterval(progressInterval);
                    dialog.remove();
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º Lampa
                    PreloadUI.startWatching(torrent);
                }
            });
            
            dialog.find('.preload-stop-btn').on('click', function() {
                TorrServeAPI.cancelPreload(taskId, function(error) {
                    if (error) {
                        Lampa.Noty.show('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ' + error, {type: 'error'});
                    } else {
                        Lampa.Noty.show('–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', {type: 'success'});
                    }
                });
                clearInterval(progressInterval);
                dialog.remove();
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            dialog.data('interval', progressInterval);
            dialog.data('taskId', taskId);
            
            return dialog;
        },

        // –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        updateProgressDialog: function(dialog, status) {
            var percent = 0;
            if (status.target_bytes > 0) {
                percent = Math.round((status.progress_bytes / status.target_bytes) * 100);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            var circumference = 326.56;
            var offset = circumference - (percent / 100) * circumference;
            dialog.find('.progress-ring-circle').css('stroke-dashoffset', offset);
            dialog.find('.progress-percent').text(percent + '%');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            var statusText = PreloadUI.getStatusText(status.state);
            var statusClass = status.state === 'error' ? 'status-error' : 
                            (status.ready ? 'status-ready' : '');
            
            dialog.find('.status-text').text(statusText).attr('class', 'info-value status-text ' + statusClass);
            
            var speedText = status.speed_bps > 0 ? 
                PreloadUI.formatSpeed(status.speed_bps) : '-';
            dialog.find('.speed-text').text(speedText);
            
            var progressText = PreloadUI.formatBytes(status.progress_bytes) + ' / ' + 
                              PreloadUI.formatBytes(status.target_bytes);
            dialog.find('.progress-text').text(progressText);
            
            var etaText = status.eta_seconds > 0 ? 
                PreloadUI.formatTime(status.eta_seconds) : '-';
            dialog.find('.eta-text').text(etaText);
            
            var peersText = status.seeds + ' / ' + status.peers;
            dialog.find('.peers-text').text(peersText);
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            var minPercent = 25; // –ú–∏–Ω–∏–º—É–º 25% –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            dialog.find('.preload-watch-btn').prop('disabled', percent < minPercent);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            if (status.ready && !dialog.data('notified')) {
                dialog.data('notified', true);
                if (Settings.show_notifications) {
                    Lampa.Noty.show('üé¨ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä', {
                        type: 'success', 
                        timeout: 5000
                    });
                }
            }
        },

        // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        startWatching: function(torrent) {
            console.log('[PreloadUI] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', torrent.title);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è TorrServe
            var streamUrl = Settings.torrserve_host + '/stream/' + 
                          encodeURIComponent(torrent.title) + 
                          '?link=' + encodeURIComponent(torrent.magnet) + 
                          '&index=0&play';
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–µ–µ—Ä Lampa
            Lampa.Player.play({
                url: streamUrl,
                title: torrent.title,
                quality: torrent.quality || '4K'
            });
            
            Lampa.Player.listener.send('play', {});
        },

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        getStatusText: function(state) {
            var states = {
                'queued': '–í –æ—á–µ—Ä–µ–¥–∏',
                'starting': '–ó–∞–ø—É—Å–∫',
                'getting_info': '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                'calculating_optimal_size': '–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞',
                'running': '–ó–∞–≥—Ä—É–∑–∫–∞',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ',
                'error': '–û—à–∏–±–∫–∞'
            };
            return states[state] || state;
        },

        formatBytes: function(bytes) {
            if (bytes === 0) return '0 B';
            var k = 1024;
            var sizes = ['B', '–ö–ë', '–ú–ë', '–ì–ë'];
            var i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        },

        formatSpeed: function(bps) {
            return PreloadUI.formatBytes(bps) + '/—Å';
        },

        formatTime: function(seconds) {
            if (seconds < 60) return seconds + '—Å';
            if (seconds < 3600) return Math.floor(seconds / 60) + '–º ' + (seconds % 60) + '—Å';
            return Math.floor(seconds / 3600) + '—á ' + Math.floor((seconds % 3600) / 60) + '–º';
        }
    };

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Lampa
    var LampaIntegration = {
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
        init: function() {
            console.log('[Lampa Integration] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é Lampa
            LampaIntegration.addSettings();
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞–º
            LampaIntegration.interceptTorrentClicks();
            
            console.log('[Lampa Integration] –ü–ª–∞–≥–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        },

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞
        addSettings: function() {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
            Lampa.Settings.listener.follow('open', function(e) {
                if (e.name === 'main') {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    var item = $('<div class="settings-param selector" data-type="toggle" data-name="smart_preload_enabled">' +
                               '<div class="settings-param__name">TorrServe Smart Preload</div>' +
                               '<div class="settings-param__value">–í–∫–ª—é—á–∏—Ç—å —É–º–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É</div>' +
                               '</div>');
                    
                    $('.settings .settings-param').last().after(item);
                    
                    item.on('click', function() {
                        LampaIntegration.openSettings();
                    });
                }
            });
        },

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞
        openSettings: function() {
            var modal = $('<div class="smart-preload-settings"></div>');
            
            var html = `
                <div class="smart-preload-settings-container">
                    <div class="settings-header">
                        <h2>‚öôÔ∏è TorrServe Smart Preload</h2>
                        <button class="settings-close">√ó</button>
                    </div>
                    
                    <div class="settings-content">
                        <div class="setting-item">
                            <label>üåê –ê–¥—Ä–µ—Å TorrServe:</label>
                            <input type="text" class="torrserve-host" value="${Settings.torrserve_host}" 
                                   placeholder="http://192.168.1.100:8090">
                        </div>
                        
                        <div class="setting-item">
                            <label>
                                <input type="checkbox" class="auto-calculate" ${Settings.auto_calculate ? 'checked' : ''}>
                                ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
                            </label>
                        </div>
                        
                        <div class="setting-item">
                            <label>üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</label>
                            <input type="range" min="10" max="90" value="${Settings.default_percent}" 
                                   class="default-percent">
                            <span class="percent-display">${Settings.default_percent}%</span>
                        </div>
                        
                        <div class="setting-item">
                            <label>‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ (–º–∏–Ω—É—Ç—ã):</label>
                            <input type="number" min="5" max="120" value="${Settings.preload_timeout}" 
                                   class="preload-timeout">
                        </div>
                        
                        <div class="setting-item">
                            <label>
                                <input type="checkbox" class="show-notifications" ${Settings.show_notifications ? 'checked' : ''}>
                                üîî –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            </label>
                        </div>
                    </div>
                    
                    <div class="settings-footer">
                        <button class="save-settings">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button class="test-connection">üîó –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</button>
                    </div>
                </div>
            `;
            
            modal.html(html);
            
            // –°—Ç–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            var settingsStyles = `
                <style>
                .smart-preload-settings {
                    position: fixed;
                    top: 0; left: 0; right: 0; bottom: 0;
                    background: rgba(0,0,0,0.8);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 10003;
                }
                .smart-preload-settings-container {
                    background: #1a1a1a;
                    border-radius: 12px;
                    width: 90%;
                    max-width: 600px;
                    max-height: 80vh;
                    overflow-y: auto;
                }
                .settings-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 20px 30px;
                    border-bottom: 1px solid #333;
                }
                .settings-header h2 {
                    color: #fff;
                    margin: 0;
                    font-size: 20px;
                }
                .settings-close {
                    background: none;
                    border: none;
                    color: #ccc;
                    font-size: 24px;
                    cursor: pointer;
                    padding: 0;
                    width: 30px;
                    height: 30px;
                }
                .settings-content {
                    padding: 20px 30px;
                }
                .setting-item {
                    margin-bottom: 20px;
                }
                .setting-item label {
                    display: block;
                    color: #fff;
                    margin-bottom: 8px;
                    font-weight: bold;
                }
                .setting-item input[type="text"], 
                .setting-item input[type="number"] {
                    width: 100%;
                    padding: 10px;
                    border: 1px solid #555;
                    border-radius: 6px;
                    background: #2a2a2a;
                    color: #fff;
                    font-size: 14px;
                }
                .setting-item input[type="range"] {
                    width: calc(100% - 60px);
                    margin-right: 10px;
                }
                .percent-display {
                    color: #ff6b35;
                    font-weight: bold;
                    min-width: 50px;
                    display: inline-block;
                }
                .setting-item input[type="checkbox"] {
                    margin-right: 10px;
                    transform: scale(1.2);
                }
                .settings-footer {
                    padding: 20px 30px;
                    border-top: 1px solid #333;
                    display: flex;
                    gap: 15px;
                    justify-content: center;
                }
                .save-settings, .test-connection {
                    padding: 10px 20px;
                    border: none;
                    border-radius: 6px;
                    font-size: 14px;
                    cursor: pointer;
                    transition: background 0.3s;
                }
                .save-settings {
                    background: #4CAF50;
                    color: white;
                }
                .save-settings:hover {
                    background: #45a049;
                }
                .test-connection {
                    background: #2196F3;
                    color: white;
                }
                .test-connection:hover {
                    background: #1976D2;
                }
                </style>
            `;
            
            $('head').append(settingsStyles);
            $('body').append(modal);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
            modal.find('.settings-close').on('click', function() {
                modal.remove();
            });
            
            modal.find('.default-percent').on('input', function() {
                var value = $(this).val();
                modal.find('.percent-display').text(value + '%');
            });
            
            modal.find('.save-settings').on('click', function() {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                Settings.torrserve_host = modal.find('.torrserve-host').val();
                Settings.auto_calculate = modal.find('.auto-calculate').prop('checked');
                Settings.default_percent = parseInt(modal.find('.default-percent').val());
                Settings.preload_timeout = parseInt(modal.find('.preload-timeout').val());
                Settings.show_notifications = modal.find('.show-notifications').prop('checked');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Lampa Storage
                Lampa.Storage.set('torrserver_host', Settings.torrserve_host);
                Lampa.Storage.set('smart_preload_auto', Settings.auto_calculate);
                Lampa.Storage.set('smart_preload_percent', Settings.default_percent);
                Lampa.Storage.set('smart_preload_timeout', Settings.preload_timeout);
                Lampa.Storage.set('smart_preload_notifications', Settings.show_notifications);
                
                Lampa.Noty.show('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', {type: 'success'});
                modal.remove();
            });
            
            modal.find('.test-connection').on('click', function() {
                var host = modal.find('.torrserve-host').val();
                
                Lampa.Utils.request({
                    url: host + '/echo',
                    timeout: 5000,
                    success: function(response) {
                        Lampa.Noty.show('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å TorrServe —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', {type: 'success'});
                    },
                    error: function() {
                        Lampa.Noty.show('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å TorrServe', {type: 'error'});
                    }
                });
            });
        },

        // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–ª–∏–∫–æ–≤ –ø–æ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞–º
        interceptTorrentClicks: function() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è Lampa –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤
        if (window.Lampa && window.Lampa.Listener) {
            console.log('[Lampa Integration] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–±—ã—Ç–∏—è–º Lampa');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç –ø—Ä–∏ –µ–≥–æ –≤—ã–±–æ—Ä–µ
            var currentTorrentData = null;
            
            window.Lampa.Listener.follow('torrent', function(e) {
                if (e.type === 'onenter') {
                    console.log('[Lampa Integration] –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:', e.element);
                    currentTorrentData = LampaIntegration.extractTorrentDataFromElement(e.element);
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é Player.play
            if (window.Lampa && window.Lampa.Player && window.Lampa.Player.play) {
                LampaIntegration.originalPlayerPlay = window.Lampa.Player.play;
            }
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ!
            window.Lampa.Listener.follow('torrent_file', function(e) {
                if (e.type === 'onenter' && currentTorrentData) {
                    console.log('[Lampa Integration] –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞:', e.element);
                    
                    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
                    var fileData = {
                        ...currentTorrentData,
                        file_url: e.element.url,
                        file_title: e.element.title,
                        file_size: e.element.size || null,
                        timeline: e.element.timeline || null,
                        element: e.element,
                        item: e.item
                    };
                    
                    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º Player.play –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
                    if (window.Lampa && window.Lampa.Player) {
                        window.Lampa.Player.play = function(element) {
                            console.log('[Lampa Integration] –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω Player.play, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥');
                            
                            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                            if (LampaIntegration.originalPlayerPlay) {
                                window.Lampa.Player.play = LampaIntegration.originalPlayerPlay;
                            }
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
                            PreloadUI.showChoiceDialog(fileData, function(action) {
                                if (action === 'preload') {
                                    LampaIntegration.handlePreloadChoice(fileData);
                                } else if (action === 'watch') {
                                    LampaIntegration.handleWatchChoice(fileData, element);
                                }
                            });
                        };
                    }
                }
            });
        } else {
            console.warn('[Lampa Integration] Lampa.Listener –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –∫–ª–∏–∫–∏');
            
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            $(document).on('click', '.torrent-item', function(e) {
                var $this = $(this);
                var torrentData = LampaIntegration.extractTorrentData($this);
                
                if (torrentData && torrentData.magnet) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    PreloadUI.showChoiceDialog(torrentData, function(action) {
                        if (action === 'preload') {
                            LampaIntegration.handlePreloadChoice(torrentData);
                        } else if (action === 'watch') {
                            LampaIntegration.handleWatchChoice(torrentData);
                        }
                    });
                    
                    return false;
                }
            });
        }
        },

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ Lampa (–Ω–æ–≤—ã–π API)
        extractTorrentDataFromElement: function(element) {
            try {
                if (element && element.MagnetUri) {
                    return {
                        title: element.Title || element.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç',
                        magnet: element.MagnetUri,
                        quality: LampaIntegration.detectQuality(element.Title || element.title),
                        size: element.Size || null,
                        seeds: element.Seeders || 0,
                        peers: element.Peers || 0,
                        tracker: element.Tracker || ''
                    };
                }
                
                return null;
            } catch (e) {
                console.warn('[Lampa Integration] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ Lampa:', e);
                return null;
            }
        },

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ DOM (fallback)
        extractTorrentData: function($element) {
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                var data = $element.data('json') || $element.data('torrent') || {};
                
                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                if (!data.magnet) {
                    data.magnet = $element.attr('data-magnet') || 
                                 $element.find('[data-magnet]').attr('data-magnet') ||
                                 $element.attr('href');
                }
                
                if (!data.title) {
                    data.title = $element.attr('data-title') || 
                                $element.find('.online__title, .files__title').text() ||
                                $element.text().trim();
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ magnet-—Å—Å—ã–ª–∫–∞
                if (data.magnet && data.magnet.startsWith('magnet:')) {
                    return {
                        title: data.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç',
                        magnet: data.magnet,
                        quality: data.quality || LampaIntegration.detectQuality(data.title),
                        size: data.size || null
                    };
                }
                
                return null;
            } catch (e) {
                console.warn('[Lampa Integration] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–∞:', e);
                return null;
            }
        },

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        detectQuality: function(title) {
            if (!title) return '';
            
            title = title.toLowerCase();
            if (title.includes('2160p') || title.includes('4k')) return '4K';
            if (title.includes('1080p')) return '1080p';
            if (title.includes('720p')) return '720p';
            return '';
        },

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        handlePreloadChoice: function(torrentData) {
            console.log('[Lampa Integration] –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è:', torrentData.title);
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            TorrServeAPI.getRecommendation(torrentData.magnet, 0, function(error, recommendation) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –∏–ª–∏ –±–µ–∑)
                PreloadUI.showPreloadSetup(torrentData, recommendation, function(action, options) {
                    if (action === 'start') {
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
                        TorrServeAPI.startPreload(torrentData.magnet, 0, options, function(error, result) {
                            if (error) {
                                Lampa.Noty.show('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: ' + error, {type: 'error'});
                            } else {
                                Lampa.Noty.show('–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!', {type: 'success'});
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                                PreloadUI.showPreloadProgress(torrentData, result.task_id);
                            }
                        });
                    }
                });
            });
        },

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        handleWatchChoice: function(fileData, element) {
            console.log('[Lampa Integration] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è:', fileData.file_title);
            
            if (element && window.Lampa && window.Lampa.Player) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º Lampa –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                console.log('[Lampa Integration] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Player Lampa');
                
                // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é Player.play
                if (LampaIntegration.originalPlayerPlay) {
                    LampaIntegration.originalPlayerPlay.call(window.Lampa.Player, element);
                } else {
                    // Fallback - –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
                    window.Lampa.Player.play(element);
                }
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (window.Lampa.Player.callback) {
                    window.Lampa.Player.callback(function() {
                        if (window.Lampa.Controller) {
                            window.Lampa.Controller.toggle('modal');
                        }
                    });
                }
            } else {
                // Fallback —á–µ—Ä–µ–∑ –Ω–∞—à –º–µ—Ç–æ–¥
                PreloadUI.startWatching(fileData);
            }
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Lampa
    if (window.Lampa) {
        LampaIntegration.init();
    } else {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Lampa
        $(document).ready(function() {
            var checkLampa = setInterval(function() {
                if (window.Lampa) {
                    clearInterval(checkLampa);
                    LampaIntegration.init();
                }
            }, 100);
        });
    }

    console.log('[TorrServe Smart Preload] –ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω');

})();
